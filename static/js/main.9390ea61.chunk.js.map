{"version":3,"sources":["images lazy /^/.//.*$/ groupOptions: {} namespace object","api/actions.ts","api/types.ts","api/lib.ts","api/logic.ts","api/reducers.ts","api/store.ts","components/Files.tsx","components/Footer.tsx","components/Header.tsx","components/Summary.tsx","components/App.tsx","index.tsx"],"names":["map","./animals/alligator.png","./animals/badger.png","./animals/bear.png","./animals/budgie.png","./animals/bumblebee.png","./animals/cat.png","./animals/chicken.png","./animals/cow.png","./animals/crab.png","./animals/cute-hamster.png","./animals/deer.png","./animals/dog.png","./animals/dolphin.png","./animals/dove.png","./animals/elephant.png","./animals/falcon.png","./animals/fish.png","./animals/flamingo.png","./animals/fox.png","./animals/frog.png","./animals/grasshopper.png","./animals/hornet.png","./animals/horse.png","./animals/hummingbird.png","./animals/kangaroo.png","./animals/kiwi-bird.png","./animals/ladybird.png","./animals/leopard.png","./animals/lion.png","./animals/llama.png","./animals/monarch-butterfly.png","./animals/mouse-animal.png","./animals/octopus.png","./animals/orca.png","./animals/owl.png","./animals/panda.png","./animals/parrot.png","./animals/peacock.png","./animals/pig.png","./animals/prawn.png","./animals/puffin-bird.png","./animals/rabbit.png","./animals/rhinoceros.png","./animals/seal.png","./animals/sheep.png","./animals/sloth.png","./animals/snail.png","./animals/snake.png","./animals/squirrel.png","./animals/starfish.png","./animals/stork.png","./animals/swan.png","./animals/turtle.png","./animals/unicorn.png","./animals/whale.png","./animals/wolf.png","./animals/zebra.png","./exampleFiles","./exampleFiles.json","./ui/remove-cursor.png","webpackAsyncContext","req","ids","Promise","all","slice","__webpack_require__","e","then","id","t","resolve","Error","code","keys","Object","module","exports","appendImages","images","type","payload","removeAll","plains","n","symbols","Math","pow","symbolsPerCard","generateCards","d","toConsumableArray","Array","shuffle","concat","flatMap","a","b","c","fileToDataUrl","file","reject","reader","FileReader","onerror","onload","result","readAsDataURL","getImageRatio","dataUrl","img","Image","width","height","src","logic","createLogic","process","_process","asyncToGenerator","regenerator_default","mark","_callee2","_ref","dispatch","done","action","wrap","_context2","prev","next","_ref2","_callee","image","base64src","_context","sent","t0","t1","uniqueId","t2","t3","name","abrupt","ratio","title","stop","_x4","apply","this","arguments","_x","_x2","_x3","_process2","_x5","_x6","_x7","toString","_ref4","_callee3","_ref3","getState","cards","columnsPerPage","rowsPerPage","cardsPerPage","columnWidth","rowHeight","pdf","_context3","card","s","floor","pageWidth","JsPDF","chunk","forEach","page","addPage","i","x","y","circle","elements","k1","k2","_loop2","size","random","max","element","some","element2","push","_loop","length","_element$image","addImage","save","returnPromise","window","open","URL","createObjectURL","output","_x8","_x9","_x10","latest","_process3","_callee5","obj","_context5","exampleFiles","_ref5","_callee4","_context4","default","_x14","_x11","_x12","_x13","initialState","createStore","state","undefined","filter","composeWithDevTools","applyMiddleware","createLogicMiddleware","connect","loadExamples","uploadImages","files","removeImage","react_default","createElement","Container","className","Divider","horizontal","Button","Group","primary","as","htmlFor","Icon","Or","text","onClick","onChange","target","multiple","style","display","accept","Segment","basic","textAlign","Image_Image","key","alt","Footer","inverted","vertical","href","HeaderComponent","Header","content","generatePdf","count","findLastIndex","activePlain","nextPlain","activeProgress","nextProgress","raised","Progress","percent","attached","color","autoSuccess","Fragment","Subheader","positive","App","components_Header","components_Files","components_Summary","components_Footer","ReactDOM","render","es","store","components_App","document","getElementById"],"mappings":"+0CAAA,IAAAA,EAAA,CACAC,0BAAA,CACA,IACA,EACA,GAEAC,uBAAA,CACA,IACA,EACA,GAEAC,qBAAA,CACA,IACA,EACA,GAEAC,uBAAA,CACA,IACA,EACA,GAEAC,0BAAA,CACA,IACA,EACA,GAEAC,oBAAA,CACA,IACA,EACA,GAEAC,wBAAA,CACA,IACA,EACA,GAEAC,oBAAA,CACA,IACA,EACA,IAEAC,qBAAA,CACA,IACA,EACA,IAEAC,6BAAA,CACA,IACA,EACA,IAEAC,qBAAA,CACA,IACA,EACA,IAEAC,oBAAA,CACA,IACA,EACA,IAEAC,wBAAA,CACA,IACA,EACA,IAEAC,qBAAA,CACA,IACA,EACA,IAEAC,yBAAA,CACA,IACA,EACA,IAEAC,uBAAA,CACA,IACA,EACA,IAEAC,qBAAA,CACA,IACA,EACA,IAEAC,yBAAA,CACA,IACA,EACA,IAEAC,oBAAA,CACA,IACA,EACA,IAEAC,qBAAA,CACA,IACA,EACA,IAEAC,4BAAA,CACA,IACA,EACA,IAEAC,uBAAA,CACA,IACA,EACA,IAEAC,sBAAA,CACA,IACA,EACA,IAEAC,4BAAA,CACA,IACA,EACA,IAEAC,yBAAA,CACA,IACA,EACA,IAEAC,0BAAA,CACA,IACA,EACA,IAEAC,yBAAA,CACA,IACA,EACA,IAEAC,wBAAA,CACA,IACA,EACA,IAEAC,qBAAA,CACA,IACA,EACA,IAEAC,sBAAA,CACA,IACA,EACA,IAEAC,kCAAA,CACA,IACA,EACA,IAEAC,6BAAA,CACA,IACA,EACA,IAEAC,wBAAA,CACA,IACA,EACA,IAEAC,qBAAA,CACA,IACA,EACA,IAEAC,oBAAA,CACA,IACA,EACA,IAEAC,sBAAA,CACA,IACA,EACA,IAEAC,uBAAA,CACA,IACA,EACA,IAEAC,wBAAA,CACA,IACA,EACA,IAEAC,oBAAA,CACA,IACA,EACA,IAEAC,sBAAA,CACA,IACA,EACA,IAEAC,4BAAA,CACA,IACA,EACA,IAEAC,uBAAA,CACA,IACA,EACA,IAEAC,2BAAA,CACA,IACA,EACA,IAEAC,qBAAA,CACA,IACA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","file":"static/js/main.9390ea61.chunk.js","sourcesContent":["var map = {\n\t\"./animals/alligator.png\": [\n\t\t399,\n\t\t7,\n\t\t3\n\t],\n\t\"./animals/badger.png\": [\n\t\t400,\n\t\t7,\n\t\t4\n\t],\n\t\"./animals/bear.png\": [\n\t\t401,\n\t\t7,\n\t\t5\n\t],\n\t\"./animals/budgie.png\": [\n\t\t402,\n\t\t7,\n\t\t6\n\t],\n\t\"./animals/bumblebee.png\": [\n\t\t403,\n\t\t7,\n\t\t7\n\t],\n\t\"./animals/cat.png\": [\n\t\t404,\n\t\t7,\n\t\t8\n\t],\n\t\"./animals/chicken.png\": [\n\t\t405,\n\t\t7,\n\t\t9\n\t],\n\t\"./animals/cow.png\": [\n\t\t406,\n\t\t7,\n\t\t10\n\t],\n\t\"./animals/crab.png\": [\n\t\t407,\n\t\t7,\n\t\t11\n\t],\n\t\"./animals/cute-hamster.png\": [\n\t\t408,\n\t\t7,\n\t\t12\n\t],\n\t\"./animals/deer.png\": [\n\t\t409,\n\t\t7,\n\t\t13\n\t],\n\t\"./animals/dog.png\": [\n\t\t410,\n\t\t7,\n\t\t14\n\t],\n\t\"./animals/dolphin.png\": [\n\t\t411,\n\t\t7,\n\t\t15\n\t],\n\t\"./animals/dove.png\": [\n\t\t412,\n\t\t7,\n\t\t16\n\t],\n\t\"./animals/elephant.png\": [\n\t\t413,\n\t\t7,\n\t\t17\n\t],\n\t\"./animals/falcon.png\": [\n\t\t414,\n\t\t7,\n\t\t18\n\t],\n\t\"./animals/fish.png\": [\n\t\t415,\n\t\t7,\n\t\t19\n\t],\n\t\"./animals/flamingo.png\": [\n\t\t416,\n\t\t7,\n\t\t20\n\t],\n\t\"./animals/fox.png\": [\n\t\t417,\n\t\t7,\n\t\t21\n\t],\n\t\"./animals/frog.png\": [\n\t\t418,\n\t\t7,\n\t\t22\n\t],\n\t\"./animals/grasshopper.png\": [\n\t\t419,\n\t\t7,\n\t\t23\n\t],\n\t\"./animals/hornet.png\": [\n\t\t420,\n\t\t7,\n\t\t24\n\t],\n\t\"./animals/horse.png\": [\n\t\t421,\n\t\t7,\n\t\t25\n\t],\n\t\"./animals/hummingbird.png\": [\n\t\t422,\n\t\t7,\n\t\t26\n\t],\n\t\"./animals/kangaroo.png\": [\n\t\t423,\n\t\t7,\n\t\t27\n\t],\n\t\"./animals/kiwi-bird.png\": [\n\t\t424,\n\t\t7,\n\t\t28\n\t],\n\t\"./animals/ladybird.png\": [\n\t\t425,\n\t\t7,\n\t\t29\n\t],\n\t\"./animals/leopard.png\": [\n\t\t426,\n\t\t7,\n\t\t30\n\t],\n\t\"./animals/lion.png\": [\n\t\t427,\n\t\t7,\n\t\t31\n\t],\n\t\"./animals/llama.png\": [\n\t\t428,\n\t\t7,\n\t\t32\n\t],\n\t\"./animals/monarch-butterfly.png\": [\n\t\t429,\n\t\t7,\n\t\t33\n\t],\n\t\"./animals/mouse-animal.png\": [\n\t\t430,\n\t\t7,\n\t\t34\n\t],\n\t\"./animals/octopus.png\": [\n\t\t431,\n\t\t7,\n\t\t35\n\t],\n\t\"./animals/orca.png\": [\n\t\t432,\n\t\t7,\n\t\t36\n\t],\n\t\"./animals/owl.png\": [\n\t\t433,\n\t\t7,\n\t\t37\n\t],\n\t\"./animals/panda.png\": [\n\t\t434,\n\t\t7,\n\t\t38\n\t],\n\t\"./animals/parrot.png\": [\n\t\t435,\n\t\t7,\n\t\t39\n\t],\n\t\"./animals/peacock.png\": [\n\t\t436,\n\t\t7,\n\t\t40\n\t],\n\t\"./animals/pig.png\": [\n\t\t437,\n\t\t7,\n\t\t41\n\t],\n\t\"./animals/prawn.png\": [\n\t\t438,\n\t\t7,\n\t\t42\n\t],\n\t\"./animals/puffin-bird.png\": [\n\t\t439,\n\t\t7,\n\t\t43\n\t],\n\t\"./animals/rabbit.png\": [\n\t\t440,\n\t\t7,\n\t\t44\n\t],\n\t\"./animals/rhinoceros.png\": [\n\t\t441,\n\t\t7,\n\t\t45\n\t],\n\t\"./animals/seal.png\": [\n\t\t442,\n\t\t7,\n\t\t46\n\t],\n\t\"./animals/sheep.png\": [\n\t\t443,\n\t\t7,\n\t\t47\n\t],\n\t\"./animals/sloth.png\": [\n\t\t444,\n\t\t7,\n\t\t48\n\t],\n\t\"./animals/snail.png\": [\n\t\t445,\n\t\t7,\n\t\t49\n\t],\n\t\"./animals/snake.png\": [\n\t\t446,\n\t\t7,\n\t\t50\n\t],\n\t\"./animals/squirrel.png\": [\n\t\t447,\n\t\t7,\n\t\t51\n\t],\n\t\"./animals/starfish.png\": [\n\t\t448,\n\t\t7,\n\t\t52\n\t],\n\t\"./animals/stork.png\": [\n\t\t449,\n\t\t7,\n\t\t53\n\t],\n\t\"./animals/swan.png\": [\n\t\t450,\n\t\t7,\n\t\t54\n\t],\n\t\"./animals/turtle.png\": [\n\t\t451,\n\t\t7,\n\t\t55\n\t],\n\t\"./animals/unicorn.png\": [\n\t\t452,\n\t\t7,\n\t\t56\n\t],\n\t\"./animals/whale.png\": [\n\t\t453,\n\t\t7,\n\t\t57\n\t],\n\t\"./animals/wolf.png\": [\n\t\t454,\n\t\t7,\n\t\t58\n\t],\n\t\"./animals/zebra.png\": [\n\t\t455,\n\t\t7,\n\t\t59\n\t],\n\t\"./exampleFiles\": [\n\t\t110,\n\t\t3\n\t],\n\t\"./exampleFiles.json\": [\n\t\t110,\n\t\t3\n\t],\n\t\"./ui/remove-cursor.png\": [\n\t\t456,\n\t\t7,\n\t\t60\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn Promise.all(ids.slice(2).map(__webpack_require__.e)).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, ids[1])\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 274;\nmodule.exports = webpackAsyncContext;","import {\n  APPEND_IMAGES,\n  AppendImagesAction,\n  CardImage,\n  GENERATE_PDF,\n  GeneratePdfAction,\n  LOAD_EXAMPLES,\n  LoadExamplesAction,\n  Prime,\n  REMOVE_ALL,\n  REMOVE_IMAGE,\n  RemoveAllAction,\n  RemoveImageAction,\n  UPLOAD_IMAGES,\n  UploadImagesAction,\n} from './types';\n\nexport const appendImages = (images: CardImage[]): AppendImagesAction => ({\n  type: APPEND_IMAGES,\n  payload: images,\n});\n\nexport const generatePdf = (n: Prime): GeneratePdfAction => ({\n  type: GENERATE_PDF,\n  payload: { n },\n});\n\nexport const loadExamples = (): LoadExamplesAction => ({\n  type: LOAD_EXAMPLES,\n});\n\nexport const removeAll = (): RemoveAllAction => ({\n  type: REMOVE_ALL,\n});\n\nexport const removeImage = (id: string): RemoveImageAction => ({\n  type: REMOVE_IMAGE,\n  payload: id,\n});\n\nexport const uploadImages = (files: FileList | null): UploadImagesAction => ({\n  type: UPLOAD_IMAGES,\n  payload: files ? [...files] : [],\n});\n","// Redux store state\nexport interface State {\n  images: CardImage[];\n}\n\n// Possible redux action types\nexport const APPEND_IMAGES = 'APPEND_IMAGES';\nexport const GENERATE_PDF = 'GENERATE_PDF';\nexport const LOAD_EXAMPLES = 'LOAD_EXAMPLES';\nexport const REMOVE_ALL = 'REMOVE_ALL';\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport const UPLOAD_IMAGES = 'UPLOAD_IMAGES';\n\n// Payload types\nexport type Prime = 2 | 3 | 5 | 7 | 11;\n\nexport interface CardImage {\n  base64src: string;\n  id: string;\n  ratio: number;\n  title?: string;\n}\n\n// Action types\nexport interface AppendImagesAction {\n  type: typeof APPEND_IMAGES;\n  payload: CardImage[];\n}\n\nexport interface GeneratePdfAction {\n  type: typeof GENERATE_PDF;\n  payload: {\n    n: Prime;\n  };\n}\n\nexport interface LoadExamplesAction {\n  type: typeof LOAD_EXAMPLES;\n}\n\nexport interface RemoveAllAction {\n  type: typeof REMOVE_ALL;\n}\n\nexport interface RemoveImageAction {\n  type: typeof REMOVE_IMAGE;\n  payload: string;\n}\n\nexport interface UploadImagesAction {\n  type: typeof UPLOAD_IMAGES;\n  payload: File[];\n}\n\nexport type Actions =\n  | AppendImagesAction\n  | GeneratePdfAction\n  | LoadExamplesAction\n  | RemoveAllAction\n  | RemoveImageAction\n  | UploadImagesAction;\n","import shuffle from 'lodash/shuffle';\n\nimport { Prime } from './types';\n\n/**\n * Generate supported plains (dimensions) according to the Ray-Chaudhuri–Wilson theorem\n * n - prime number\n * @see https://math.stackexchange.com/questions/36798/what-is-the-math-behind-the-game-spot-it\n */\nexport const plains = [2, 3, 5, 7, 11].map(n => ({\n  n: n as Prime,\n  symbols: n ** 2 + n + 1,\n  symbolsPerCard: n + 1,\n}));\n\n/**\n * Generate unique cards for available plains\n * @see https://math.stackexchange.com/questions/1303497/what-is-the-algorithm-to-generate-the-cards-in-the-game-dobble-known-as-spo\n */\nexport const generateCards = (n: Prime) => {\n  const d = [...Array(n).keys()];\n\n  return shuffle([\n    shuffle([...d, n]),\n    ...d.flatMap(a => [\n      shuffle([0, ...d.map(b => n + 1 + n * a + b)]),\n      ...d.map(b =>\n        shuffle([a + 1, ...d.map(c => n + 1 + n * c + ((a * c + b) % n))]),\n      ),\n    ]),\n  ]);\n};\n\n/**\n * Promisify the FileReader::readAsDataURL method\n */\nexport const fileToDataUrl = (file: File): Promise<string> =>\n  new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onerror = reject;\n    reader.onload = () => resolve(reader.result as string);\n    reader.readAsDataURL(file);\n  });\n\n/**\n * Promisify the FileReader::readAsDataURL method\n */\nexport const getImageRatio = (dataUrl: string): Promise<number> =>\n  new Promise((resolve, reject) => {\n    const img = new Image();\n    img.onerror = reject;\n    img.onload = () => resolve(img.width / img.height);\n    img.src = dataUrl;\n  });\n","import JsPDF from 'jspdf';\nimport chunk from 'lodash/chunk';\nimport random from 'lodash/random';\nimport shuffle from 'lodash/shuffle';\nimport uniqueId from 'lodash/uniqueId';\nimport { createLogic, Logic } from 'redux-logic';\n\nimport exampleFiles from '../images/exampleFiles.json';\n\nimport { appendImages, removeAll } from './actions';\nimport { fileToDataUrl, generateCards, getImageRatio } from './lib';\nimport {\n  CardImage,\n  GENERATE_PDF,\n  GeneratePdfAction,\n  LOAD_EXAMPLES,\n  State,\n  UPLOAD_IMAGES,\n  UploadImagesAction,\n} from './types';\n\nexport const uploadImages = createLogic({\n  type: UPLOAD_IMAGES,\n  async process({ action }: { action: UploadImagesAction }, dispatch, done) {\n    const images: CardImage[] = await Promise.all(\n      action.payload.map(async image => {\n        const base64src = await fileToDataUrl(image);\n        return {\n          base64src,\n          id: uniqueId('image_'),\n          ratio: await getImageRatio(base64src),\n          title: image.name,\n        };\n      }),\n    );\n\n    dispatch(appendImages(images));\n    done();\n  },\n});\n\nexport const generatePdf = createLogic({\n  type: GENERATE_PDF,\n  async process(\n    { action, getState }: { action: GeneratePdfAction; getState: () => State },\n    dispatch,\n    done,\n  ) {\n    const { n } = action.payload;\n    const images: CardImage[] = getState().images;\n\n    // Apply images to generated card sequences\n    const cards = generateCards(n).map(card => card.map(s => images[s]));\n\n    // PDF sizes in mm\n    const pageWidth = 210; // A4\n    const pageHeight = 297; // A4\n    const cardRadius = 42; // Size of a single card\n    const columnsPerPage = Math.floor(pageWidth / (cardRadius * 2));\n    const rowsPerPage = Math.floor(pageHeight / (cardRadius * 2));\n    const cardsPerPage = columnsPerPage * rowsPerPage;\n    const columnWidth = pageWidth / columnsPerPage;\n    const rowHeight = pageHeight / rowsPerPage;\n\n    const pdf = new JsPDF();\n\n    // Split cards into pages\n    chunk(cards, cardsPerPage).forEach((cards, page) => {\n      if (page > 0) {\n        pdf.addPage();\n      }\n\n      cards.forEach((card, i) => {\n        // Determine middle of the card\n        const x = (i % 2) * columnWidth + columnWidth / 2;\n        const y = Math.floor(i / 2) * rowHeight + rowHeight / 2;\n\n        // Draw outline\n        pdf.circle(x, y, cardRadius, 'S');\n\n        interface CardElement {\n          image: CardImage;\n          x: number;\n          y: number;\n          width: number;\n          height: number;\n        }\n\n        // Prepare randomly aligned elements on the card\n        const elements: CardElement[] = [];\n\n        // Brute-force it until it will look good :)\n        let k1 = 100;\n        while (k1-- > 0) {\n          card.forEach(image => {\n            let k2 = 100;\n            while (k2-- > 0) {\n              // Size can smaller after each iteration\n              const size = random(Math.max((0.4 * k2) / 100, 0.3), 0.6);\n\n              const element: CardElement = {\n                x: random(-1, 1, true),\n                y: random(-1, 1, true),\n                width: size,\n                height: size,\n                image,\n              };\n\n              // Test if element is within the circle\n              if (\n                (element.x + element.width) ** 2 + element.y ** 2 > 1 ||\n                (element.x + element.width) ** 2 +\n                  (element.y + element.height) ** 2 >\n                  1 ||\n                element.x ** 2 + element.y ** 2 > 1 ||\n                element.x ** 2 + (element.y + element.height) ** 2 > 1\n              ) {\n                continue;\n              }\n\n              // Test if there is no collision with other elements\n              if (\n                elements.some(\n                  element2 =>\n                    element.x < element2.x + element2.width &&\n                    element.x + element.width > element2.x &&\n                    element.y < element2.y + element2.height &&\n                    element.y + element.height > element2.y,\n                )\n              ) {\n                continue;\n              }\n\n              // Everything ok, add it to the collection\n              elements.push(element);\n              break;\n            }\n          });\n\n          if (elements.length !== n + 1) {\n            // Not able to generate a layout, start from scratch:\n            elements.length = 0;\n            continue;\n          }\n\n          // Everything ok\n          break;\n        }\n\n        if (elements.length !== n + 1) {\n          throw new Error('Could not generate a possible card layout');\n        }\n\n        elements.forEach(element => {\n          const { base64src, id } = element.image;\n          pdf.addImage(\n            base64src,\n            'PNG',\n            x + element.x * cardRadius,\n            y + element.y * cardRadius,\n            cardRadius * element.width,\n            cardRadius * element.height,\n            id,\n            'NONE',\n            0, // random(0, 359),\n          );\n        });\n      });\n    });\n\n    if (process.env.NODE_ENV === 'production') {\n      // Force file download\n      await pdf.save('Cards.pdf', { returnPromise: true });\n    } else {\n      // Easier mode to preview during development\n      window.open(URL.createObjectURL(pdf.output('blob')));\n    }\n\n    done();\n  },\n});\n\nexport const loadExamples = createLogic({\n  type: LOAD_EXAMPLES,\n  latest: true,\n  async process(obj, dispatch, done) {\n    dispatch(removeAll());\n\n    const images: CardImage[] = await Promise.all(\n      shuffle(exampleFiles).map(async file => {\n        const base64src = (await import(`../images/${file}`)).default;\n        return {\n          base64src,\n          id: uniqueId('image_'),\n          ratio: await getImageRatio(base64src),\n          title: file,\n        };\n      }),\n    );\n\n    dispatch(appendImages(images));\n    done();\n  },\n});\n\nexport default [uploadImages, generatePdf, loadExamples] as Logic[];\n","import {\n  Actions,\n  APPEND_IMAGES,\n  REMOVE_ALL,\n  REMOVE_IMAGE,\n  State,\n} from './types';\n\nconst initialState: State = {\n  images: [],\n};\n\nexport default function(state = initialState, action: Actions): State {\n  switch (action.type) {\n    case APPEND_IMAGES:\n      return {\n        images: [...state.images, ...action.payload],\n      };\n    case REMOVE_ALL:\n      return {\n        images: [],\n      };\n    case REMOVE_IMAGE:\n      return {\n        images: state.images.filter(image => image.id !== action.payload),\n      };\n    default:\n      return state;\n  }\n}\n","import { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createLogicMiddleware } from 'redux-logic';\n\nimport logic from './logic';\nimport reducers from './reducers';\n\nexport type State = ReturnType<typeof reducers>;\n\nexport default createStore(\n  reducers,\n  composeWithDevTools(applyMiddleware(createLogicMiddleware(logic))),\n);\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport {\n  Button,\n  Container,\n  Divider,\n  Icon,\n  Image,\n  Segment,\n} from 'semantic-ui-react';\n\nimport {\n  loadExamples,\n  removeAll,\n  removeImage,\n  uploadImages,\n} from '../api/actions';\nimport { State } from '../api/store';\nimport { CardImage } from '../api/types';\n\ninterface Props {\n  images: CardImage[];\n  loadExamples: typeof loadExamples;\n  removeAll: typeof removeAll;\n  removeImage: typeof removeImage;\n  uploadImages: typeof uploadImages;\n}\n\nconst Files: FC<Props> = ({\n  images,\n  loadExamples,\n  removeAll,\n  removeImage,\n  uploadImages,\n}) => (\n  <Container className=\"pusher\">\n    <Divider horizontal>\n      <Button.Group size=\"huge\">\n        <Button primary as=\"label\" htmlFor=\"fileUpload\">\n          <Icon name=\"cloud upload\" />\n          Upload images\n        </Button>\n        <Button.Or text=\"or\" />\n        <Button onClick={loadExamples}>\n          <Icon name=\"images outline\" />\n          Load examples\n        </Button>\n      </Button.Group>\n    </Divider>\n\n    <input\n      type=\"file\"\n      id=\"fileUpload\"\n      onChange={e => uploadImages(e.target.files)}\n      multiple\n      style={{ display: 'none' }}\n      accept=\".png,.jpg,.jpeg\"\n    />\n\n    <Segment basic textAlign=\"center\">\n      <Image.Group size=\"tiny\">\n        {images.map(({ id, base64src, title }) => (\n          <Image\n            key={id}\n            src={base64src}\n            onClick={() => removeImage(id)}\n            className=\"preview\"\n            title={title}\n            alt={title}\n          />\n        ))}\n      </Image.Group>\n      {images.length > 0 && (\n        <Button onClick={removeAll}>\n          <Icon name=\"trash\" />\n          Remove all images\n        </Button>\n      )}\n    </Segment>\n  </Container>\n);\n\nexport default connect(\n  (state: State) => ({ images: state.images }),\n  { removeAll, loadExamples, uploadImages, removeImage },\n)(Files);\n","import React from 'react';\nimport { Container, Segment } from 'semantic-ui-react';\n\nconst Footer = () => (\n  <Segment inverted vertical className=\"footer\">\n    <Container text textAlign=\"center\">\n      This site is not affiliated in any way with Dobble, Spot It!, its creators\n      or distributors.\n      <br />\n      Dobble and Spot It! are trademarks of ASMODEE GROUP.\n      <br />\n      Example images by{' '}\n      <a href=\"https://icons8.com/\" target=\"_blank\">\n        icons8.com\n      </a>\n    </Container>\n  </Segment>\n);\n\nexport default Footer;\n","import React from 'react';\nimport { Button, Container, Header, Icon, Segment } from 'semantic-ui-react';\n\nconst HeaderComponent = () => (\n  <Segment inverted textAlign=\"center\" vertical className=\"header\">\n    <Container text>\n      <Header\n        as=\"h1\"\n        content=\"Dobble-like generator\"\n        inverted\n        className=\"title\"\n      />\n      <Header\n        as=\"h2\"\n        content=\"Prepare and print cards with your own images\"\n        inverted\n        className=\"subtitle\"\n      />\n    </Container>\n  </Segment>\n);\n\nexport default HeaderComponent;\n","import findLastIndex from 'lodash/findLastIndex';\nimport React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport {\n  Button,\n  Container,\n  Divider,\n  Header,\n  Icon,\n  Progress,\n  Segment,\n} from 'semantic-ui-react';\n\nimport { generatePdf } from '../api/actions';\nimport { plains } from '../api/lib';\nimport { State } from '../api/store';\nimport { CardImage } from '../api/types';\n\ninterface Props {\n  images: CardImage[];\n  plains: typeof plains;\n  generatePdf: typeof generatePdf;\n}\n\nconst Summary: FC<Props> = ({ images, plains, generatePdf }) => {\n  const count = images.length;\n\n  const i = findLastIndex(plains, ({ symbols }) => count >= symbols);\n\n  const activePlain = plains[i] || null;\n  const nextPlain = plains[i + 1] || null;\n\n  const activeProgress = (count / (activePlain || nextPlain).symbols) * 100;\n  const nextProgress = nextPlain ? (count / nextPlain.symbols) * 100 : 100;\n\n  return (\n    <Container>\n      <Segment textAlign=\"center\" raised>\n        <Progress\n          percent={activeProgress}\n          attached=\"top\"\n          color=\"blue\"\n          autoSuccess\n        />\n        <Progress\n          percent={nextProgress}\n          attached=\"bottom\"\n          color=\"blue\"\n          autoSuccess\n        />\n\n        {activePlain && (\n          <>\n            <Header as=\"h1\" className=\"instructions\">\n              You can generate {activePlain.symbols} cards with{' '}\n              {activePlain.symbolsPerCard} images per card.\n              {count > activePlain.symbols && (\n                <Header.Subheader>\n                  You have uploaded too much images. Last{' '}\n                  {count - activePlain.symbols} images will not be used.\n                </Header.Subheader>\n              )}\n            </Header>\n            <Button\n              size=\"massive\"\n              positive\n              onClick={() => generatePdf(activePlain.n)}\n            >\n              <Icon name=\"file pdf outline\" />\n              Generate and download PDF file\n            </Button>\n          </>\n        )}\n\n        {activePlain && nextPlain && (\n          <Divider horizontal className=\"padded\">\n            Or\n          </Divider>\n        )}\n\n        {nextPlain && (\n          <Header as=\"h3\" className=\"instructions\">\n            Add {nextPlain.symbols - count} more images to generate{' '}\n            {nextPlain.symbols} cards with {nextPlain.symbolsPerCard} images per\n            card\n          </Header>\n        )}\n      </Segment>\n    </Container>\n  );\n};\n\nexport default connect(\n  (state: State) => ({ images: state.images, plains }),\n  { generatePdf },\n)(Summary);\n","import React from 'react';\n\nimport Files from './Files';\nimport Footer from './Footer';\nimport Header from './Header';\nimport Summary from './Summary';\n\nconst App = () => (\n  <>\n    <Header />\n    <Files />\n    <Summary />\n    <Footer />\n  </>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './api/store';\nimport App from './components/App';\nimport './styles.scss';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}